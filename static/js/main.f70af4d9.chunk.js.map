{"version":3,"sources":["routes/Price.tsx","api.ts","routes/Chart.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["Desc","styled","span","props","isMinus","theme","textColor","Price","tickersData","quotes","USD","price","toFixed","percent_change_1h","percent_change_24h","percent_change_7d","percent_change_30d","percent_change_1y","BASE_URL","fetchCoins","fetch","then","resp","json","Chart","coinId","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","isLoading","data","type","series","x","map","time_close","y","open","high","low","close","options","mode","chart","height","width","toolbar","show","background","xaxis","axisBorder","axisTicks","labels","yaxis","tooltip","formatter","value","grid","stroke","Container","div","Header","header","Title","h1","Loader","Overview","ul","detailBoxColor","Tabs","Tab","isActive","linkColor","Button","button","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","refetchInterval","tickersLoading","loading","to","Helmet","name","toUpperCase","rank","symbol","description","total_supply","max_supply","path","Img","img","CoinList","li","boxColor","bgColor","Coins","slice","coin","pathname","id","src","toLowerCase","Router","darkTheme","LightTheme","GlobalStyle","createGlobalStyle","App","useState","isDark","setIsDark","onClick","current","initialIsOpen","queryClient","QueryClient","ReactDOM","render","client","document","getElementById"],"mappings":"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","file":"static/js/main.f70af4d9.chunk.js","sourcesContent":["import {useQuery} from \"react-query\";\r\nimport {fetchCoinTickers} from \"../api\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IPriceProps {\r\n    tickersData: any;\r\n}\r\n\r\nconst Desc = styled.span<{ isMinus: boolean }>`\r\n  padding: 10px 0;\r\n  text-align: center;\r\n  display: inherit;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n\r\n  span {\r\n    color: ${props => props.isMinus ? \"red\" : props.theme.textColor};\r\n  }\r\n\r\n`;\r\n\r\nfunction Price({tickersData}: IPriceProps) {\r\n\r\n    return (\r\n        <div>\r\n            <Desc isMinus={tickersData?.quotes.USD.price < 0}>\r\n                PRICES:\r\n                <span> ${tickersData?.quotes.USD.price.toFixed(3)}</span>\r\n            </Desc>\r\n            <Desc isMinus={tickersData?.quotes.USD.percent_change_1h < 0}>\r\n                1 Hour :\r\n                <span> {tickersData?.quotes.USD.percent_change_1h}%</span>\r\n            </Desc>\r\n            <Desc isMinus={tickersData?.quotes.USD.percent_change_24h < 0}>\r\n                24 Hour :\r\n                <span> {tickersData?.quotes.USD.percent_change_24h}%</span>\r\n            </Desc>\r\n            <Desc isMinus={tickersData?.quotes.USD.percent_change_7d < 0}>\r\n                Week:\r\n                <span> {tickersData?.quotes.USD.percent_change_7d}%</span>\r\n            </Desc>\r\n            <Desc isMinus={tickersData?.quotes.USD.percent_change_30d < 0}>\r\n                Month:\r\n                <span> {tickersData?.quotes.USD.percent_change_30d}%</span>\r\n            </Desc>\r\n            <Desc isMinus={tickersData?.quotes.USD.percent_change_1y < 0}>\r\n                Year:\r\n                <span> {tickersData?.quotes.USD.percent_change_1y}%</span>\r\n            </Desc>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Price;","// Coins.tsx 의 async / await 부분을 담당.\r\nconst BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport function fetchCoins() {\r\n    return fetch(`${BASE_URL}/coins`)\r\n        .then(resp => resp.json()\r\n        );\r\n}\r\n\r\n// Coin.tsx 의 async / await 부분 담당.\r\nexport function fetchCoinInfo(coinId: string) {\r\n    return fetch(`${BASE_URL}/coins/${coinId}`)\r\n        .then(resp => resp.json()\r\n        );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n    return fetch(`${BASE_URL}/tickers/${coinId}`)\r\n        .then(resp => resp.json(),\r\n        );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n    // historical 의 필수 query param 인 시작일과 종료일을 계산한다.\r\n    // 먼저 JS 는 기본적으로 milliseconds 를 제공하므로 1000 으로 나누어야 한다.\r\n    // 이후 해당 값을 버림한다(Math.floor()).\r\n    const endDate = Math.floor(Date.now() / 1000);\r\n\r\n    // 60초 60분 24시간 \"9일 + 1(배열은 0부터 시작이므로 가지고오고 싶은 자료 일수 -1)\" 분의 자료를 가지고 온다.\r\n    const startDate = endDate - 60 * 60 * 24 * 9;\r\n\r\n    return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`)\r\n        .then(resp => resp.json()\r\n        );\r\n}\r\n","import {useQuery} from \"react-query\";\r\nimport {fetchCoinHistory} from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface IChartProps {\r\n    coinId: string;\r\n}\r\n\r\ninterface IChartData {\r\n    time_open: string;\r\n    time_close: string;\r\n    open: number;\r\n    high: number;\r\n    low: number;\r\n    close: number;\r\n    volume: number;\r\n    market_cap: number;\r\n}\r\n\r\n\r\nfunction Chart({coinId}: IChartProps) {\r\n\r\n    const {isLoading, data} = useQuery<IChartData[]>(\r\n        [\"ohlcv\", coinId],\r\n        () => fetchCoinHistory(coinId)\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? (\r\n                \"Loading Chart...\"\r\n            ) : (\r\n                <ApexChart\r\n                    type=\"candlestick\"\r\n                    series={[{\r\n                        data: [\r\n                            {\r\n                                x: data?.map(price => price.time_close)[0],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[0]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[1],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[1]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[2],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[2]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[3],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[3]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[4],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[4]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[5],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[5]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[6],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[6]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[7],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[7]\r\n                            },{\r\n                                x: data?.map(price => price.time_close)[8],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[8]\r\n                            },\r\n                            {\r\n                                x: data?.map(price => price.time_close)[9],\r\n                                y: data?.map(price => [\r\n                                    price.open,\r\n                                    price.high,\r\n                                    price.low,\r\n                                    price.close\r\n                                ])[9]\r\n                            },\r\n                        ]\r\n                    }]}\r\n                    options={{\r\n                        theme: {\r\n                            mode: \"dark\",\r\n                        },\r\n                        chart: {\r\n                            type: \"candlestick\",\r\n                            height: 500,\r\n                            width: 750,\r\n                            toolbar: {\r\n                                show: false,\r\n                            },\r\n                            background: \"transparent\",\r\n                        },\r\n                        xaxis: {\r\n                            axisBorder: {show: false},\r\n                            axisTicks: {show: false},\r\n                            labels: {show: false},\r\n                        },\r\n                        yaxis: {\r\n                            show: false,\r\n                        },\r\n                        tooltip: {\r\n                            y: {\r\n                                formatter: (value) => `$ ${value.toFixed(3)}`\r\n                            }\r\n                        },\r\n                        grid:{\r\n                            show:false\r\n                        },\r\n                        stroke: {\r\n                            width: 2,\r\n                        },\r\n                    }\r\n                    }\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import {Link, Route, Switch, useLocation, useParams, useRouteMatch} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Price from \"./Price\";\r\nimport Chart from \"./Chart\";\r\nimport {useQuery} from \"react-query\";\r\nimport {fetchCoinInfo, fetchCoinTickers} from \"../api\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// interface\r\ninterface RouteParams {\r\n    coinId: string;\r\n}\r\n\r\ninterface RouteState {\r\n    name: string;\r\n}\r\n\r\ninterface IInfoData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    is_new: boolean;\r\n    is_active: boolean;\r\n    type: string;\r\n    contract: string;\r\n    platform: string;\r\n    description: string;\r\n    message: string;\r\n    open_source: boolean;\r\n    started_at: string;\r\n    development_status: string;\r\n    hardware_wallet: boolean;\r\n    proof_type: string;\r\n    org_structure: string;\r\n    hash_algorithm: string;\r\n    links_extended: ILinkEx[];\r\n    first_data_at: string;\r\n    last_data_at: string;\r\n}\r\n\r\ninterface ILinkEx {\r\n    type: string;\r\n    url: string;\r\n}\r\n\r\ninterface IPriceData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    circulating_supply: number;\r\n    total_supply: number;\r\n    max_supply: number;\r\n    beta_value: number;\r\n    first_data_at: string;\r\n    last_updated: string;\r\n    quotes: {\r\n        USD: {\r\n            price: number;\r\n            volume_24h: number;\r\n            volume_24h_change_24h: number;\r\n            market_cap: number;\r\n            market_cap_change_24h: number;\r\n            percent_change_15m: number;\r\n            percent_change_30m: number;\r\n            percent_change_1h: number;\r\n            percent_change_6h: number;\r\n            percent_change_12h: number;\r\n            percent_change_24h: number;\r\n            percent_change_7d: number;\r\n            percent_change_30d: number;\r\n            percent_change_1y: number;\r\n            ath_price: number;\r\n            ath_date: string;\r\n            percent_from_price_ath: number;\r\n        }\r\n    };\r\n}\r\n\r\n// styled-components\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 500px;\r\n  margin: 10px auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 45px;\r\n  color: ${props => props.theme.textColor};\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  color: ${props => props.theme.textColor};\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Overview = styled.ul`\r\n  display: flex;\r\n  text-align: center;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px 20px;\r\n  background-color: ${props => props.theme.detailBoxColor};\r\n  min-width: 50px;\r\n  min-height: 40px;\r\n  border-radius: 10px;\r\n  box-shadow: 6px 7px 15px darkslategrey;\r\n\r\n  li {\r\n    font-size: 23px;\r\n    margin-right: 10px;\r\n    padding: 10px 0;\r\n    text-align: inherit;\r\n    align-items: inherit;\r\n  }\r\n\r\n  span(li) {\r\n  max-font-size: border;\r\n}\r\n`;\r\n\r\nconst Desc = styled.span`\r\n  padding: 20px 0;\r\n  text-align: center;\r\n  display: inherit;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${props => props.theme.detailBoxColor};\r\n  padding: 7px 0;\r\n  border-radius: 7px;\r\n  box-shadow: 6px 7px 15px darkslategrey;\r\n  color: ${props => props.isActive ?\r\n          props.theme.linkColor : props.theme.textColor\r\n  };\r\n\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: ${props => props.theme.detailBoxColor};\r\n  margin: 20px;\r\n  border-radius: 50px;\r\n  border: 1px solid ${props => props.theme.detailBoxColor};\r\n  box-shadow: 6px 7px 15px darkslategrey;\r\n  display: block;\r\n\r\n  a {\r\n    font-size: 35px;\r\n    font-weight: bold;\r\n    color: ${props => props.theme.textColor};\r\n  }\r\n`;\r\n\r\n\r\n// main function\r\nfunction Coin() {\r\n    // 각 코인마다 존재하는 고유한 id 를 param 으로 전달, 고유한 key 로서 사용.\r\n    const {coinId} = useParams<RouteParams>();\r\n    const {state} = useLocation<RouteState>();\r\n\r\n    // 특정 url 에 있는지 여부를 확인할 수 있는 useRouteMatch()\r\n    const priceMatch = useRouteMatch(\"reactchallenge/:coinId/price\");\r\n    const chartMatch = useRouteMatch(\"reactchallenge/:coinId/chart\");\r\n\r\n    // React Query 를 사용하지 않은 예시.\r\n    // const [loading, setLoading] = useState(true);\r\n    // const [info, setInfo] = useState<IInfoData>();\r\n    // const [priceInfo, setPriceInfo] = useState<IPriceData>();\r\n    //\r\n    // useEffect(() => {\r\n    //     (async () => {\r\n    //         const infoData = await (\r\n    //             await fetch(\r\n    //                 `https://api.coinpaprika.com/v1/coins/${coinId}`)\r\n    //         ).json();\r\n    //         const priceData = await (\r\n    //             await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\r\n    //         ).json();\r\n    //         setInfo(infoData);\r\n    //         setPriceInfo(priceData);\r\n    //         setLoading(false);\r\n    //     })();\r\n    //     //    deps 가 변하면 uesEffect 가 실행된다.\r\n    // }, []);\r\n\r\n    // React Query 사용하여 코드를 압축.\r\n    // useQuery : api.ts 에서 설정한 fetchCoins function 을 호출하고, 그 결과를 data 에 담는다.\r\n    // 만약 fetchCoins(=fetcher function) 가 loading 중이면 isLoading 으로 이를 알린다.\r\n    // ** 이하와 같이 coinId 로 key 값이 겹치는 경우, 배열에 넣고 [\"지정할 key 이름\",사용될 key 값] 으로 다른 key 값을 부여한다.\r\n    // isLoading 과 data 역시 겹치는데, {겹치는 변수:새이름} 방식으로 새 이름을 부여한다.\r\n    const {isLoading: infoLoading, data: infoData} = useQuery<IInfoData>(\r\n        [\"info\", coinId],\r\n        () => fetchCoinInfo(coinId)\r\n    );\r\n\r\n    const {isLoading: tickersLoading, data: tickersData} = useQuery<IPriceData>(\r\n        [\"tickers\", coinId],\r\n        () => fetchCoinTickers(coinId),\r\n        {\r\n            refetchInterval: 4000,\r\n        }\r\n    );\r\n\r\n    // isLoading 이 두 개 이므로 or(||) 를 사용하여 loading 둘 중 하나임을 알려야 한다.\r\n    const loading = infoLoading || tickersLoading;\r\n\r\n    return (\r\n    <>\r\n        {/* 메인페이지 되돌아가기 버튼 */}\r\n        <Button>\r\n            <Link to={`/reactchallenge`}>&larr; back</Link>\r\n        </Button>\r\n        <Container>\r\n            <Helmet>\r\n                <title>\r\n                    {state?.name ? state.name.toUpperCase() :\r\n                        loading ? \"Loading...\" : infoData?.name.toUpperCase()}\r\n                </title>\r\n            </Helmet>\r\n            <Header>\r\n                <Title>{state?.name ? state.name.toUpperCase() :\r\n                    loading ? \"Loading...\" : infoData?.name.toUpperCase()}</Title>\r\n            </Header>\r\n            {loading ? (\r\n                <Loader>LOADING....</Loader>\r\n            ) : (\r\n                <div>\r\n                    <Overview>\r\n                        <li><span>&nbsp;RANK:</span><br/>\r\n                            <span>\r\n                                {infoData?.rank}\r\n                            </span>\r\n                        </li>\r\n                        <li><span>&nbsp;SYMBOL:</span><br/>\r\n                            <span>\r\n                                {`$${infoData?.symbol}`}\r\n                            </span>\r\n                        </li>\r\n                        <li><span>&nbsp;PRICE:</span><br/>\r\n                            <span>\r\n                                ${tickersData?.quotes.USD.price.toFixed(3)}\r\n                            </span>\r\n                        </li>\r\n                    </Overview>\r\n                    <Desc>\r\n                        {infoData?.description ? infoData?.description : \"No description\"}\r\n                    </Desc>\r\n                    <Overview>\r\n                        <li>\r\n                            <span>&nbsp;TOTAL SUPPLY:</span><br/>\r\n                            <span>\r\n                                {tickersData?.total_supply ? tickersData?.total_supply : \"No data\"}\r\n                            </span>\r\n                        </li>\r\n                        <li>\r\n                            <span>MAX SUPPLY:</span><br/>\r\n                            <span>\r\n                                {tickersData?.max_supply ? tickersData?.max_supply : \"No data\"}\r\n                            </span>\r\n                        </li>\r\n                    </Overview>\r\n\r\n                    {/* chart & price links*/}\r\n                    <Tabs>\r\n                        <Tab isActive={chartMatch !== null}>\r\n                            <Link to={`/${coinId}/chart`}>Chart</Link>\r\n                        </Tab>\r\n                        <Tab isActive={priceMatch !== null}>\r\n                            <Link to={`/${coinId}/price`}>Price</Link>\r\n                        </Tab>\r\n                    </Tabs>\r\n\r\n                    <Switch>\r\n                        <Route path={`/:coinId/price`}>\r\n                            <Price tickersData={tickersData}/>\r\n                        </Route>\r\n                        <Route path={`/:coinId/chart`}>\r\n                            <Chart coinId={coinId}/>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            )}\r\n        </Container>\r\n    </>\r\n)\r\n    ;\r\n}\r\n\r\nexport default Coin;","import {useEffect, useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {useQuery} from \"react-query\";\r\nimport {fetchCoins} from \"../api\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// 이하의 자료유형을 바탕으로 Coin 정보의 interface 를 작성.\r\ninterface ICoins {\r\n    id: string,\r\n    name: string,\r\n    symbol: string,\r\n    rank: number,\r\n    is_new: boolean,\r\n    is_active: boolean,\r\n    type: string,\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 500px;\r\n  margin: 10px auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 45px;\r\n  color: ${props => props.theme.textColor};\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  color: ${props => props.theme.textColor};\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst CoinList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n  background-color: ${props => props.theme.boxColor};\r\n  color: ${props => props.theme.bgColor};\r\n  margin-bottom: 12px;\r\n  border-radius: 10px;\r\n\r\n  a {\r\n    display: flex;\r\n    padding: 10px;\r\n    transition: color 0.2s ease-in-out;\r\n    align-items: center;\r\n  }\r\n\r\n  &:hover {\r\n    color: ${props => props.theme.linkColor};\r\n  }\r\n`;\r\n\r\n\r\nfunction Coins() {\r\n    // React Query 를 사용하지 않은 예시.\r\n\r\n    // const [coins, setCoins] = useState<CoinInterface[]>([]);\r\n    // const [loading, setLoading] = useState(true);\r\n    //\r\n    // useEffect(() => {\r\n    //     // (function 입력)(); 하는 것으로 useEffect 내에서 function 을 바로 실행 가능하다.\r\n    //     (async () => {\r\n    //\r\n    //         const resp = await fetch(\"https://api.coinpaprika.com/v1/coins\");\r\n    //         const json = await resp.json();\r\n    //         setCoins(json.slice(0, 100));\r\n    //         setLoading(false);\r\n    //     })();\r\n    // }, [])\r\n\r\n    // React Query 사용하여 코드를 압축.\r\n    // useQuery : api.ts 에서 설정한 fetchCoins function 을 호출하고, 그 결과를 data 에 담는다.\r\n    // 만약 fetchCoins(=fetcher function) 가 loading 중이면 isLoading 으로 이를 알린다.\r\n    // 기존에 데이터를 .slice() 하였던 부분은 return 내부에서 처리한다.\r\n    const {isLoading, data} = useQuery<ICoins[]>(\"allCoins\", fetchCoins)\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>TOP 100 COINS</title>\r\n            </Helmet>\r\n            <Header>\r\n                <Title>TOP 100 COINS</Title>\r\n            </Header>\r\n            {isLoading ? (\r\n                <Loader>LOADING....</Loader>\r\n            ) : (\r\n                <CoinList>\r\n                    {/* 기존에 데이터를 .slice() 하였던 부분은 여기서 처리한다. */}\r\n                    {data?.slice(0, 100).map(coin => (\r\n                        <Coin key={coin.id}>\r\n                            <Link to={{\r\n                                pathname: `/reactchallenge/${coin.id}`,\r\n                                state: {name: coin.name}\r\n                            }}>\r\n                                {/*아이콘을 다운받아 사용한다. symbol 은 대문자이므로 .toLowerCase() 로 소문자로 가공*/}\r\n                                <Img src={\r\n                                    `https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}/>\r\n                                &nbsp;{coin.name} &rarr;\r\n                            </Link>\r\n                        </Coin>\r\n                    ))}\r\n                </CoinList>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Coins;","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nfunction Router() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/reactchallenge/:coinId\">\r\n                    <Coin/>\r\n                </Route>\r\n                <Route path=\"/reactchallenge\">\r\n                    <Coins/>\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Router;","import {DefaultTheme} from \"styled-components\";\r\n\r\n// ThemeProvider 에서 사용할 props 를 전달한다.\r\n// 여기서 설정한 색상이 App의 styled-components 에 전달되어 css 를 결정한다.\r\n\r\n// interface 인 DefaultTheme 을 extend.\r\nexport const darkTheme:DefaultTheme = {\r\n    bgColor:\"#2f3640\",\r\n    textColor:\"#44bd32\",\r\n    linkColor: \"#00a8ff\",\r\n    boxColor: \"#718092\",\r\n    detailBoxColor: \"#00000080\",\r\n};\r\n\r\nexport const LightTheme:DefaultTheme = {\r\n    bgColor:\"#dcdde1\",\r\n    textColor:\"#222f3e\",\r\n    linkColor: \"#44bd32\",\r\n    boxColor: \"#0097e6\",\r\n    detailBoxColor: \"whitesmoke\",\r\n}","import Router from \"./Router\";\nimport styled, {createGlobalStyle, ThemeProvider} from \"styled-components\";\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport {darkTheme, LightTheme} from \"./theme\";\nimport {useState} from \"react\";\n\n// 글로벌 스타일을 지정(이하의 CSS 가 모든 페이지에 적용된다.)\n// 모든 css 의 기본값을 제거하기 위해 reset css 를 적용하였다. (구글링 reset css 검색)\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;400&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n\n  body {\n    line-height: 1;\n  }\n\n  ol, ul {\n    list-style: none;\n  }\n\n  blockquote, q {\n    quotes: none;\n  }\n\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  \n  * {\n    box-sizing: border-box;\n  }\n  \n  // 만약 상단에서 @import 가 실패하면 이하의 글꼴을 적용한다.\n  body {\n    font-family: 'Source Sans Pro', sans-serif;\n    background-color: ${props => props.theme.bgColor};\n    color: ${props => props.theme.textColor};\n  }\n  \n  // Link 태그는 결국 HTML 에서 a 태그로 바뀌므로 이곳에서 CSS 를 설정한다.\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: ${props => props.theme.detailBoxColor};\n  margin: 20px;\n  border-radius: 30px;\n  border: 1px solid ${props => props.theme.detailBoxColor};\n  box-shadow: 6px 7px 15px darkslategrey;\n  display: block;\n  font-size: 25px;\n  font-weight: bold;\n  color: ${props => props.theme.textColor};\n`;\n\nfunction App() {\n    const [isDark, setIsDark] = useState(false);\n    const toggleDark = () => {\n        setIsDark(current => !current);\n    }\n\n    return (\n        <ThemeProvider theme={isDark ? darkTheme : LightTheme}>\n            <Button onClick={toggleDark}>{isDark ? \"Light Theme\" : \"Dark Theme\"}</Button>\n            <GlobalStyle/>\n            <Router/>\n            <ReactQueryDevtools initialIsOpen={true} />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {QueryClient, QueryClientProvider} from \"react-query\";\nimport App from './App';\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n    // ThemeProvider 를 이용하여 styled-components 에서 이용할 수 있는 props 를 전달,\n    // 해당 props 를 이용하여 css 를 바꾸게 만들 수 있다.\n    <QueryClientProvider client={queryClient}>\n        <App/>\n    </QueryClientProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}
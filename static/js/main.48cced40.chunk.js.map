{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/SelectToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","stName","categoryState","atom","key","default","TO_DO","toDoState","JSON","parse","localStorage","getItem","localToDos","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","useRecoilValue","useRecoilState","setToDos","useForm","register","handleSubmit","setValue","setItem","stringify","onSubmit","prevToDos","text","id","Date","now","type","placeholder","ToDo","onClick","e","name","currentTarget","targetIndex","findIndex","newToDo","slice","toString","DOING","DONE","liId","parentElement","cleanToDos","length","clear","SelectToDo","setCategory","onInput","value","ToDoList","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","queryClient","QueryClient","ReactDOM","render","client","linkColor","boxColor","detailBoxColor","document","getElementById"],"mappings":"iIAGYA,EAMAC,E,wFANAD,K,cAAAA,E,cAAAA,E,aAAAA,M,cAMAC,K,yBAAAA,M,KAYL,IAAMC,EAAgBC,YAAiB,CAC1CC,IAAK,WACLC,QAASL,EAAWM,QAGXC,EAAYJ,YAAc,CACnCC,IAAK,OACLC,QAASG,KAAKC,MAAMC,aAAaC,QAAQV,EAAOW,cAA0B,KAGjEC,EAAeC,YAAS,CACjCV,IAAK,eACLW,IAAM,YAAY,IAAVA,EAAS,EAATA,IACEC,EAAQD,EAAIR,GACZU,EAAWF,EAAIb,GAcrB,OAAOc,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,OCRzCG,MAhCf,WAGI,IAAMH,EAAWI,YAAenB,GAHd,EAIQoB,YAAef,GAJvB,mBAIXS,EAJW,KAIJO,EAJI,OAMyBC,cAApCC,EANW,EAMXA,SAAUC,EANC,EAMDA,aAAcC,EANb,EAMaA,SAiB/B,OAFAjB,aAAakB,QAAQ3B,EAAOW,WAAWJ,KAAKqB,UAAUb,IAGlD,uBAAMc,SAAUJ,GAfA,SAAC,GAAmB,IAAlBP,EAAiB,EAAjBA,KAKlBI,GAAS,SAAAQ,GAAS,OACd,CAACC,KAAMb,EAAMc,GAAIC,KAAKC,MAAOlB,aADf,mBAEXc,OAEPJ,EAAS,OAAQ,OAMjB,UACI,iDAAWF,EAAS,SAApB,IACOW,KAAK,OAAOC,YAAY,iBAC/B,wBAAQD,KAAK,SAAb,qBCgCGE,MAhEf,YAA4C,IAA7BN,EAA4B,EAA5BA,KAAMf,EAAsB,EAAtBA,SAAUgB,EAAY,EAAZA,GAAY,EAEbX,YAAef,GAFF,mBAEhCS,EAFgC,KAEzBO,EAFyB,KAUvCb,aAAakB,QAAQ3B,EAAOW,WAAYJ,KAAKqB,UAAUb,IAEvD,IAAMuB,EAAU,SAACC,GAA4C,IAErCC,EAChBD,EADAE,cAAgBD,KAGpBlB,GAAS,SAACQ,GACN,IAAMY,EAAcZ,EAAUa,WAAU,SAAAzB,GAAI,OAAIA,EAAKc,KAAOA,KAEtDY,EAAU,CAACb,OAAMC,KAAIhB,SAAUwB,GACrC,MAAM,GAAN,mBACOV,EAAUe,MAAM,EAAGH,IAD1B,CAEIE,GAFJ,YAGOd,EAAUe,MAAMH,EAAc,QAGzCjC,aAAakB,QAAQ3B,EAAOW,WAAYJ,KAAKqB,UAAUb,KAe3D,OAFAN,aAAakB,QAAQ3B,EAAOW,WAAYJ,KAAKqB,UAAUb,IAGnD,qBAAIiB,GAAIA,EAAGc,WAAX,UACI,+BAAOf,IACNf,IAAajB,EAAWgD,OAErB,wBAAQP,KAAMzC,EAAWgD,MAAOT,QAASA,EAAzC,mBAGHtB,IAAajB,EAAWM,OAErB,wBAAQmC,KAAMzC,EAAWM,MAAOiC,QAASA,EAAzC,mBAGHtB,IAAajB,EAAWiD,MAErB,wBAAQR,KAAMzC,EAAWiD,KAAMV,QAASA,EAAxC,kBAEJ,wBAAQA,QA7BG,SAACC,GAA4C,IAAD,EACrDU,EAAI,UAAGV,EAAEE,cAAcS,qBAAnB,aAAG,EAA+BlB,GACtCmB,EAAapC,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKc,GAAGc,aAAeG,KACjE3B,EAAS6B,GACT1C,aAAakB,QAAQ3B,EAAOW,WAAYJ,KAAKqB,UAAUb,IAClC,IAAjBA,EAAMqC,QACN3C,aAAa4C,SAuBb,wBC5CGC,MAff,WAAuB,IAAD,EACcjC,YAAepB,GAD7B,mBACXe,EADW,KACDuC,EADC,KAMlB,OACI,yBAAQC,QAJI,SAACjB,GACbgB,EAAYhB,EAAEE,cAAcgB,QAGFA,MAAOzC,EAAjC,UACI,wBAAQyC,MAAO1D,EAAWM,MAA1B,mBACA,wBAAQoD,MAAO1D,EAAWgD,MAA1B,mBACA,wBAAQU,MAAO1D,EAAWiD,KAA1B,sBCuIGU,I,EAAAA,EApIf,WAsHI,IAAM3C,EAAQK,YAAeR,GAE7B,OACI,gCACI,uCACA,uBACA,cAAC,EAAD,IACA,cAAC,EAAD,IAJJ,OAKKG,QALL,IAKKA,OALL,EAKKA,EAAO4C,KAAI,SAAAzC,GAAI,OAAI,cAAC,EAAD,eAAwBA,GAAbA,EAAKc,WC5I1C4B,EAAcC,YAAH,4wDA4DO,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAChC,SAAAF,GAAK,OAAIA,EAAMC,MAAME,aAsBnBC,MAXf,WAGI,OACI,qCACI,cAACN,EAAD,IACA,cAAC,EAAD,QCzENO,EAAc,IAAIC,cAExBC,IAASC,OACL,cAAC,IAAD,UACI,cAAC,sBAAD,CAAqBC,OAAQJ,EAA7B,SACI,cAAC,IAAD,CAAeJ,MCPW,CAClCC,QAAQ,UACRC,UAAU,UACVO,UAAW,UACXC,SAAU,UACVC,eAAgB,aDER,SACI,cAAC,EAAD,UAIZC,SAASC,eAAe,W","file":"static/js/main.48cced40.chunk.js","sourcesContent":["import {atom, selector} from \"recoil\";\r\nimport useLocalStorage from \"react-query/types/devtools/useLocalStorage\";\r\n\r\nexport enum Categories {\r\n    \"TO_DO\" = \"TO_DO\",\r\n    \"DOING\" = \"DOING\",\r\n    \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport enum stName {\r\n    \"localToDos\" = \"localToDos\"\r\n}\r\n\r\n// category 에서 특정한 string 만 허용하도록 설정하였으므로, IToDo 는 Array 가 된다.\r\nexport interface IToDo {\r\n    text: string;\r\n    id: number;\r\n    // 특정한 string 만 허용하도록 설정.\r\n    category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n    key: \"category\",\r\n    default: Categories.TO_DO,\r\n})\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n    key: \"toDo\",\r\n    default: JSON.parse(localStorage.getItem(stName.localToDos) as string) || [],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n    key: \"toDoSelector\",\r\n    get: (({get}) => {\r\n        const toDos = get(toDoState);\r\n        const category = get(categoryState);\r\n\r\n        // 이 코드를 아래 한 줄로 단축할 수 있다.\r\n        // switch (category) {\r\n        //     case \"TO_DO\": {\r\n        //         return toDos.filter((toDo) => toDo.category === \"TO_DO\");\r\n        //     }\r\n        //     case \"DOING\": {\r\n        //         return toDos.filter((toDo) => toDo.category === \"DOING\");\r\n        //     }\r\n        //     case \"DONE\": {\r\n        //         return toDos.filter((toDo) => toDo.category === \"DONE\");\r\n        //     }\r\n        // }\r\n        return toDos.filter((toDo) => toDo.category === category);\r\n    })\r\n})\r\n\r\n","import React from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useRecoilState, useRecoilValue} from \"recoil\";\r\nimport {categoryState, stName, toDoState} from \"../atoms\";\r\n\r\ninterface IForm {\r\n    toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n\r\n    // category 의 값만 필요하므로 useRecoilValue\r\n    const category = useRecoilValue(categoryState);\r\n    const [toDos, setToDos] = useRecoilState(toDoState);\r\n\r\n    const {register, handleSubmit, setValue} = useForm<IForm>();\r\n\r\n    // {} 를 이용, IForm 의 toDo만 가져온다.\r\n    const handleValid = ({toDo}: IForm) => {\r\n\r\n        // 그냥 toDos.push 는 state mutation 위반이 되므로 기존 toDos 값만을 가져와 새로운 state 를 만들어야한다.\r\n        // 기존 toDos 인 prevToDos 의 element 를 Array 에 담고, 새 toDos 내용을 {}에 담는다.\r\n\r\n        setToDos(prevToDos => [\r\n            {text: toDo, id: Date.now(), category},\r\n            ...prevToDos,\r\n        ]);\r\n        setValue(\"toDo\", \"\");\r\n    }\r\n\r\n    localStorage.setItem(stName.localToDos,JSON.stringify(toDos));\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(handleValid)}>\r\n            <input {...register(\"toDo\")}\r\n                   type=\"text\" placeholder=\"Write To Do\"/>\r\n            <button type=\"submit\">Add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CreateToDo;","import React from \"react\";\r\nimport {Categories, IToDo, stName, toDoState} from \"../atoms\";\r\nimport {useRecoilState} from \"recoil\";\r\n\r\nfunction ToDo({text, category, id}: IToDo) {\r\n\r\n    const [toDos, setToDos] = useRecoilState(toDoState);\r\n\r\n    // 들어올 props 가 interface 의 어떠한 요소와 완벽히 일치하는 것을 표기하려면\r\n    // interface명[\"해당요소 이름\"]\r\n    // const onClick = (newCategory:IToDo[\"category\"]) => {\r\n    //     console.log(\"want to \", newCategory);\r\n    // }\r\n\r\n    localStorage.setItem(stName.localToDos, JSON.stringify(toDos));\r\n\r\n    const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        const {\r\n            currentTarget: {name},\r\n        } = e;\r\n\r\n        setToDos((prevToDos) => {\r\n            const targetIndex = prevToDos.findIndex(toDo => toDo.id === id);\r\n            // const prevToDo = prevToDos[targetIndex];\r\n            const newToDo = {text, id, category: name as any};\r\n            return [\r\n                ...prevToDos.slice(0, targetIndex),\r\n                newToDo,\r\n                ...prevToDos.slice(targetIndex + 1),\r\n            ];\r\n        })\r\n        localStorage.setItem(stName.localToDos, JSON.stringify(toDos));\r\n    }\r\n\r\n    const deleteToDo = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        const liId = e.currentTarget.parentElement?.id;\r\n        const cleanToDos = toDos.filter((toDo) => toDo.id.toString() !== liId);\r\n        setToDos(cleanToDos);\r\n        localStorage.setItem(stName.localToDos, JSON.stringify(toDos));\r\n        if (toDos.length === 1) {\r\n            localStorage.clear();\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(stName.localToDos, JSON.stringify(toDos));\r\n\r\n    return (\r\n        <li id={id.toString()}>\r\n            <span>{text}</span>\r\n            {category !== Categories.DOING && (\r\n                // <button onClick={() => onClick(\"DOING\")}>Doing</button>\r\n                <button name={Categories.DOING} onClick={onClick}>Doing</button>\r\n            )}\r\n\r\n            {category !== Categories.TO_DO && (\r\n                // <button onClick={() => onClick(\"TO_DO\")}>To Do</button>\r\n                <button name={Categories.TO_DO} onClick={onClick}>To Do</button>\r\n            )}\r\n\r\n            {category !== Categories.DONE && (\r\n                // <button onClick={() => onClick(\"DONE\")}>Done</button>\r\n                <button name={Categories.DONE} onClick={onClick}>Done</button>\r\n            )}\r\n            <button onClick={deleteToDo}>Delete</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import {Categories, categoryState} from \"../atoms\";\r\nimport React from \"react\";\r\nimport {useRecoilState} from \"recoil\";\r\n\r\nfunction SelectToDo() {\r\n    const [category, setCategory] = useRecoilState(categoryState);\r\n\r\n    const onInput = (e: React.FormEvent<HTMLSelectElement>) => {\r\n        setCategory(e.currentTarget.value as any);\r\n    }\r\n    return (\r\n        <select onInput={onInput} value={category}>\r\n            <option value={Categories.TO_DO}>To Do</option>\r\n            <option value={Categories.DOING}>Doing</option>\r\n            <option value={Categories.DONE}>Done</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SelectToDo;","import React from \"react\";\r\nimport {useRecoilValue} from \"recoil\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport {IToDo, stName, toDoSelector} from \"../atoms\";\r\nimport ToDo from \"./ToDo\";\r\nimport SelectToDo from \"./SelectToDo\";\r\n\r\n// interface IForm {\r\n//     email: string;\r\n//     firstname: string;\r\n//     lastname: string;\r\n//     username: string;\r\n//     password1: string;\r\n//     password2: string;\r\n//     extraErr?: string;\r\n// }\r\n\r\nfunction ToDoList() {\r\n\r\n    // react-hook-form 를 사용하지 않고 Hooks 로만 작성했을 때.\r\n    // const [toDo, setToDo] = useState(\"\");\r\n    // const [toDoErr, setToDoErr] = useState(\"\");\r\n    // const onChange = (e:React.FormEvent<HTMLInputElement>) => {\r\n    //     const {\r\n    //         currentTarget: {value},\r\n    //     } = e;\r\n    //     setToDoErr(\"\");\r\n    //     setToDo(value);\r\n    // };\r\n    // const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\r\n    //     e.preventDefault();\r\n    //     if (toDo.length < 10) {\r\n    //         return setToDoErr(\" it's too short\")\r\n    //     }\r\n    //     console.log(\"submitted\");\r\n    // };\r\n    // return (\r\n    //     <div>\r\n    //         <form onSubmit={onSubmit}>\r\n    //             <input onChange={onChange} value={toDo} type=\"text\" placeholder=\"Write To DO\"/>\r\n    //             <button type=\"submit\">Add</button>\r\n    //             {toDoErr !== \"\" ? toDoErr : null}\r\n    //         </form>\r\n    //     </div>\r\n    // );\r\n\r\n    // react-hook-form 을 이용하여 코드를 대폭 단축.\r\n    // const {\r\n    //     register,\r\n    //     watch,\r\n    //     handleSubmit,\r\n    //     formState: {errors},\r\n    //     setError\r\n    // } = useForm<IForm>({\r\n    //     // 사용자의 이해를 돕기 위해 최초 입력값을 설정할 수 있다.\r\n    //     defaultValues: {\r\n    //         email: \"@email.com\",\r\n    //     }\r\n    // });\r\n    //\r\n    // const onValid = (data: IForm) => {\r\n    //     if (data.password1 !== data.password2) {\r\n    //         setError(\"password2\",\r\n    //             {message: \"password are not matched\"},\r\n    //             {shouldFocus: true})\r\n    //     }\r\n    //     // setError(\"extraErr\", {message: \"server offline\"});\r\n    // };\r\n    //\r\n    // console.log(errors);\r\n    //\r\n    // return (\r\n    //     <div>\r\n    //         <form style={{display: \"flex\", flexDirection: \"column\"}} onSubmit={handleSubmit(onValid)}>\r\n    //             <input {...register(\"email\",\r\n    //                 {\r\n    //                     required: \"email is required\",\r\n    //                     pattern: {\r\n    //                         value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    //                         message: \"Please recheck your input. it's not an email pattern.\"\r\n    //                     }\r\n    //                 })}\r\n    //                    placeholder=\"email\"/>\r\n    //             <span>{errors?.email?.message}</span>\r\n    //\r\n    //             <input {...register(\"firstname\", {\r\n    //                 required: \"firstname is required\",\r\n    //                 validate: {\r\n    //                     notRed1: (value) => value.includes(\"문재인\") ? \"빨갱이는 허용되지 않습니다\" : true,\r\n    //                     notRed2: (value) => value.includes(\"김정은\") ? \"빨갱이는 허용되지 않습니다\" : true,\r\n    //                 }\r\n    //             })}\r\n    //                    placeholder=\"firstname\"/>\r\n    //             <span>{errors?.firstname?.message}</span>\r\n    //\r\n    //             <input {...register(\"lastname\", {required: \"lastname is required\"})}\r\n    //                    placeholder=\"lastname\"/>\r\n    //             <span>{errors?.lastname?.message}</span>\r\n    //\r\n    //             <input {...register(\"username\", {required: \"username is required\"})}\r\n    //                    placeholder=\"username\"/>\r\n    //             <span>{errors?.username?.message}</span>\r\n    //\r\n    //             <input {...register(\"password1\",\r\n    //                 {\r\n    //                     required: \"password1 is required\",\r\n    //                     minLength: {\r\n    //                         value: 8,\r\n    //                         message: \"too short password. password must contain at least 8 words\"\r\n    //                     }\r\n    //                 })}\r\n    //                    placeholder=\"password1\"/>\r\n    //             <span>{errors?.password1?.message}</span>\r\n    //\r\n    //             <input {...register(\"password2\", {required: \"password2 is required\"})}\r\n    //                    placeholder=\"password2\"/>\r\n    //             <span>{errors?.password2?.message}</span>\r\n    //\r\n    //             <button>Add</button>\r\n    //\r\n    //             <span>\r\n    //                 {errors?.extraErr?.message}\r\n    //             </span>\r\n    //\r\n    //         </form>\r\n    //     </div>\r\n    // );\r\n\r\n    // [value, setValue] = useState() 가 있다 가정할 때,\r\n    // value 값만 가져오고 싶다면 useRecoilValue\r\n    // value 값을 변경하고 싶다면(=setValue) useSetRecoilState\r\n    // const value = useRecoilValue(toDoState);\r\n    // const modFunc = useSetRecoilState(toDoState);\r\n    // 둘 다 사용하려면 useRecoilState\r\n\r\n    const toDos = useRecoilValue(toDoSelector);\r\n\r\n    return (\r\n        <div>\r\n            <h1>TODOS</h1>\r\n            <br/>\r\n            <SelectToDo/>\r\n            <CreateToDo/>\r\n            {toDos?.map(toDo => <ToDo key={toDo.id} {...toDo}/>)}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ToDoList;","import {createGlobalStyle} from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;400&display=swap');\r\n\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed,\r\n  figure, figcaption, footer, header, hgroup,\r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-size: 100%;\r\n    font: inherit;\r\n    vertical-align: baseline;\r\n  }\r\n\r\n  /* HTML5 display-role reset for older browsers */\r\n  article, aside, details, figcaption, figure,\r\n  footer, header, hgroup, menu, nav, section {\r\n    display: block;\r\n  }\r\n\r\n  body {\r\n    line-height: 1;\r\n  }\r\n\r\n  ol, ul {\r\n    list-style: none;\r\n  }\r\n\r\n  blockquote, q {\r\n    quotes: none;\r\n  }\r\n\r\n  blockquote:before, blockquote:after,\r\n  q:before, q:after {\r\n    content: '';\r\n    content: none;\r\n  }\r\n\r\n  table {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  // 만약 상단에서 @import 가 실패하면 이하의 글꼴을 적용한다.\r\n  body {\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n    background-color: ${props => props.theme.bgColor};\r\n    color: ${props => props.theme.textColor};\r\n  }\r\n\r\n  // Link 태그는 결국 HTML 에서 a 태그로 바뀌므로 이곳에서 CSS 를 설정한다.\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n`;\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle/>\r\n            <ToDoList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {QueryClient, QueryClientProvider} from \"react-query\";\nimport App from './App';\nimport {RecoilRoot} from \"recoil\";\nimport {ThemeProvider} from \"styled-components\";\nimport {darkTheme} from \"./theme\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <RecoilRoot>\n        <QueryClientProvider client={queryClient}>\n            <ThemeProvider theme={darkTheme}>\n                <App/>\n            </ThemeProvider>\n        </QueryClientProvider>\n    </RecoilRoot>,\n    document.getElementById('root')\n);\n","import {DefaultTheme} from \"styled-components\";\r\n\r\n// ThemeProvider 에서 사용할 props 를 전달한다.\r\n// 여기서 설정한 색상이 App의 styled-components 에 전달되어 css 를 결정한다.\r\n\r\n// interface 인 DefaultTheme 을 extend.\r\nexport const darkTheme:DefaultTheme = {\r\n    bgColor:\"#2f3640\",\r\n    textColor:\"#44bd32\",\r\n    linkColor: \"#00a8ff\",\r\n    boxColor: \"#718092\",\r\n    detailBoxColor: \"#00000080\",\r\n};\r\n\r\n// export const LightTheme:DefaultTheme = {\r\n//     bgColor:\"#dcdde1\",\r\n//     textColor:\"#222f3e\",\r\n//     linkColor: \"#44bd32\",\r\n//     boxColor: \"#0097e6\",\r\n//     detailBoxColor: \"whitesmoke\",\r\n// }"],"sourceRoot":""}